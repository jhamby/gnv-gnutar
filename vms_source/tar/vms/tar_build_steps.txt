

From File: tar_build_steps.txt

 Copyright 2013, John Malmberg

 Permission to use, copy, modify, and/or distribute this software for any
 purpose with or without fee is hereby granted, provided that the above
 copyright notice and this permission notice appear in all copies.

 THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES
 WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF
 MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR
 ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES
 WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN
 ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT
 OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS SOFTWARE.

Building TAR on OpenVMS for use with GNV requires a current HP C compiler
and the updated GNV kits for Bash, SED, Make, Gawk, Coreutils,
ar_tools, and ld_tools.

The HP C 7.x compilers were used for building on Alpha and Itanium.
At this time a VAX build may not have been attempted.

Several special things were done in this port of Tar to VMS to make it
easier to keep it up to date with the Unix version.

Note the GNV$ prefix is registered for the GNV project to prevent name
collisions with other products and packages.  This is a VMS convention.

The files are stored with GNV_ instead of GNV$ most open source source
code maintainers do not want to files with $ in their source repositories.

The build procedure will copy the files to have the GNV$ names as needed.


1. The original GNU Tar source files are in their own directory tree which
is never written to by the build process.  This directory is kept up to date
with the current official patches.  See below about the how this is done
with logical names.

2. Modifications to the original GNU Tar sources were avoided as much as
possible.  The prefered methods are to insert hacks in to a header file
included by a generated config.h file, provide wrapper or replacement
routines, and sometimes a /first_include header file as described below.

3. Where a source file had to be modified for the VMS port, instead of
editing the file directly, a TPU editor script as defined below.  While the
script may occasionally need tweaking to accomodate a new official Tar
patch, usually it will not.  More on that below.

4. Most of the files that are normally generated by the GNU tar configure
and makefile are generated by the VMS build procedure instead of being
hard coded.

5. A file vms_eco_level.h is used to set the ECO of the package.  The
vms_eco_level.h needs to be set back to zero if the version or patch level
of the GNU Unix source is changed.

6. Any VAX build is an experimental build that is not currently very useful
and is not being tested.

The use of the /first_include header files for selected modules is to
provide replacement routines for ones either missing from the CRTL or
ones that did not work the way that Tar required.

The files used for a /first_include are named gnv_*.c_first in the
GNV Mercurial repository.  The build procedure may rename them to
gnv$*.c_first before using them.  This is for compatibility with GNV
based builds, where the CC compiler will automatically use a gnv$*.c_first
file if it is present.

A feature of the HP CC compiler where it will ignore a non-existent directory
in an #include directive is used to make sure that the VMS system header files
are used instead of once provided with the ported product.  Macros and
static routines are used.

A module specific TPU file can contain its own TPU commands, or it can call
the editing routines.  In most cases the Editing routines can be used to
insert a patch.


The source kits are provided in backup savesets inside of the PCSI install kit.

Backup save sets are currently the only distribution medium that I can be
sure is installed on a target VMS system that will correctly unpack files
with extended character sets in them.  You may need to adjust the ownership
of the restored files for kits on Alpha/Itanium VMS versions 8.1 and earlier.

On VAX, the filenames will be as seen on the VAX system, typically with non
ODS-2 characters and case changes prefixed with $ characters.

[gnv.common_src]tar_*_original_src.bck is the original source of the
tar kit as provided by the GNV project.
[gnv.vms_src]tar-*_vms_src.bck, if present, has the changed files that
are used for building that are not yet in the tar source kits
distributed by the GNU tar project.

These backup savesets should be restored to different directory trees on
an ODS-5 volume(s) which are referenced by concealed rooted logical names,
unless on VAX, where either an NFS or ODS-2 volume can be used.

SRC_ROOT: is for the source files common to all platforms.  This can be a
          read only copy of the files from a change control repository.

          In my build environment, the SOURCE_ROOT:[gnu.tar] is the
          same directory as src_root:[tar].

VMS_ROOT: is for the files that were changed from the repository copy of
          SRC_ROOT:

          Note, you should create the VMS_ROOT: directory tree even if it is
          initially empty.  This is where you should put edits if you are
          making changes.

          In my build environment, the source_root:[gnu_vms.tar] is a
          directory with the repository checked out code and
          vms_root:[tar] is a copy with any local modifications.

LCL_ROOT: is manually created to have the same base and sub-directories as
          SRC_ROOT: and VMS_ROOT:  This is for the architecture specific
          binaries and other files created during the build.

The logical name REF_ROOT: is defined to be a logical name that is a search
list for VMS_ROOT:,SRC_ROOT:

The logical name PRJ_ROOT: is defined to be a logical name that is a search
list for LCL_ROOT:,REF_ROOT:

The VMS_ROOT and LCL_ROOT directory trees can be created with commands
similar to:

  $ create/dir lcl_root:[tar]/prot=w:re
  $ copy src_root:[tar...]*.dir -
    lcl_root:[tar...]/prot=(o:rwed,w:re)
  $ create/dir vms_root:[tar]/prot=w:re
  $ copy src_root:[tar...]*.dir -
    vms_root:[tar...]/prot=(o:rwed,w:re)

One of the ways with to protect the source from being modified is to have
the directories under src_root: owned by a user or resource where the build
username only has read access to it.

With these search lists set up and the properly, tar can be built by
setting your default to PRJ_ROOT:[tar] and then issuing the command:

   $ @[.vms]build_vms.com

This command procedure will do the steps below and will build a PCSI kit if
the GNV_PCSI_PRODUCER and GNV_PCSI_PRODUCER_FULL_NAME, and STAGE_ROOT are
defined.

First it will build the binaries by using  MMK utility if a template.mms
file is found in the [.vms]directory.

   $ mmk/descrip=[.vms]tar.mms

Note some messages may be present about libraries not being updated by
actions.  This is an issue where MMS and MMK are not handling the correct
case of the module names, and at this time I have not found a way to work
around it.

If the template.mms file is not found, the procedure will build using the
GNV tools using the standard configure and make procedure.

For building with GNV, only the updated GNV components packages are now
needed, not the older full GNV kits.

The first step is to look for a [.vms]vms_prebuild.com step.  This procedure
generally does:

  * Sets up CC and link and other symbols.
  * Sets up logical names needed for the build.
  * Adds special first include and linker option files.
  * Builds some helper objects needed for linking.
  * Builds a script to run configure.  This is needed because
    it needs to pre-answer questions that configure either gets
    wrong on VMS, or where configure can not detect that the
    build procedure will be supplying fixed routines.
  * Copy a saved config.cache* for the platform if it exists.
  * Run the created vms_configure.sh script.
  * run vms/vms_make.sh to build the product.
  * copy the executables produced to end with a .exe file.

The build_vms.com file then will create a PCSI kit and use ZIP if available
to compress it.

To clean up after a build to start over, run the @clean_tar.com.  Use
the parameter "realclean" if you are going to run the configure script again.

   $ @[.vms]clean_tar.com realclean


The files are installed into a NEW_GNU directory for staging by running the
procedure stage_tar_install.com.  This copies the binaries and creates
alias links to them.

   $ @[.vms]stage_tar_install.com

On the VAX platform, the staged files are needed for building the PCSI
kit, as the VAX source was staged on an NFS volume, which encodes the
filenames that have any upper case or special symbols in them.

To remove the staged files, the procedure is run again with the parameter
"REMOVE".  This makes sure that the alias links are removed.

Building a PCSI kit for an architecture takes the following steps after
making sure that you have a working build environment.

Note that it requires manually creating two logical names as described
below.  It is intentional that they be manually set.  This is for
branding the PCSI kit based on who is making the kit.


   1. Make sure that you have a staging directory that can be referenced
      by the path STAGE_ROOT:[KIT]

   2. Edit the file tar_release_note_start.txt or other text files to
      reflect any changes.

   3. Define the logical name GNV_PCSI_PRODUCER to indicate who is making
      the distribution.  For making updates to an existing open source
      kit you may need to keep the producer the same.

   4. Define the logical name GNV_PCSI_PRODUCER_FULL_NAME to be your full
      name or full name of your company.

   6. Edit the file PCSI_TAR_FILE_LIST.TXT if there are new files added
      to the kit.  These files should all be ODS-2 legal filenames and
      directories.

      A limitation of the PCSI kitting procedure is that when selecting files,
      it tends to ignore the directory structure and assumes that all files
      with the same name are the same file, so every file placed in the kit
      must have a unique name.  Then a procedure needs to be added to the kit
      to create an alias link on install and remove the link on remove.

      Since at this time tar does not need this alias procedure, the steps
      to automatically build it are not included here.

      While newer versions of PCSI can support ODS-5 filenames, not all verions
      of PCSI on systems that have ODS-5 filenames do.  So as a post install
      step, the PCSI kit built by these steps does a rename to the correct
      case.

   7. Prepare to backup the files for building the kit.

      Note that if src_root: or vms_root: are NFS mounted disks, the
      step of backing up the source files will probably hang or fail.

      You need to copy the source files to VMS mounted disks and create
      logical names SRC_ROOT1 and VMS_ROOT1 to work around this to to
      reference local disks.  Make sure src_root1:[000000] and
      vms_root1:[000000] exist and can be written to.

      The command procedure compare_tar_source can be used to check
      those directories and keep them up to date.

         @compare_tar_source.com SRCBCK UPDATE

         This compares the reference GNU source with the backup
         staging directory for it and updates with any changes.

         @compare_tar_source.com VMSBCK UPDATE

         This compares the VMS specific soruce with the backup
         staging directory for it and updates with any changes.

         Leave off "UPDATE" to just check without doing any changes.

      If you are not using NFS mounted disks and do not want to have a
      separate directory for staging the sources for backup make sure
      that src_root1: and vms_root1: do not exist.

   8. Build the PCSI kit with @[.vms]build_vms

      On VAX, the product command always prompts to the terminal for a
      confirmation.

      If there is another kit for this same version of tar, but for
      a different base platform or operating system version, the product
      command will prompt to the terminal to select which one to compress.

       The following message is normal:
          %PCSI-I-CANNOTVAL, cannot validate
            EAGLE$DQA0:[stage_root.][kit]GNV-AXPVMS-TAR-V--1.PCSI;1
          -PCSI-I-NOTSIGNED, product kit is not signed and therefore has
          no manifest file

   9. Addtional testing steps.

      * For GNV configure/make based builds, the "make install" can be used
        to verify which files are installed in the new_gnu:[*...] directory
        tree.

      * For the GNV configure/make based builds, the "make check" may work
        to do a self test of the product.  Then again, it may not due to
        either missing products or bugs in the port.

      * It is good to have some self tests to validate the built images.

      * Where possible, the results of the tests should be recorded in
        JUnit format.  http://llg.cubic.org/docs/junit/
        This allows Jenkins and other automated build/test systems to
        record and present the results.

        Some files are planned to be available the vms-ports comm_rtl project:
        https://sourceforge.net/p/vms-ports/community_rtl/ci/default/tree/
        that will help in producting JUnit output.

        *  convert_make_check_junit.com - reads the output of some make
           check procedures and converts is.

        *  junit_support.com - A command file that can be called with
           parameters to build a JUnit xml file.


Good Luck.
